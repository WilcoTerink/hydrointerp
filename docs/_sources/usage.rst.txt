How to use hydrointerp
=======================

This section will describe how to use the hydrointerp package. Nearly all outputs are either as Pandas DataFrames or Xarray Datasets.

Necessary imports
-----------------
For the examples, the numpy, pandas, xarray, and hydrointerp packages are needed.

.. code:: python

    import numpy as np
    import pandas as pd
    import xarray as xr
    from hydrointerp import Interp, datasets

.. ipython:: python
   :suppress:

   import numpy as np
   import pandas as pd
   import xarray as xr
   from hydrointerp import Interp, datasets


Loading in appropriate input data
---------------------------------
The input must be either a grid as an Xarray Dataset or as points as a Pandas DataFrame. Both of these input data must have associated naming parameters.

.. ipython:: python

    ### Input Parameters
    nc1 = 'nasa_gpm_2015-06-18'
    csv1 = 'ecan_data_2015-06-18'

    grid_time_name = 'time'
    grid_x_name = 'lon'
    grid_y_name = 'lat'
    grid_data_name = 'precipitationCal'
    grid_crs = 4326

    point_time_name = 'date'
    point_x_name = 'NZTMX'
    point_y_name = 'NZTMY'
    point_data_name = 'precip'
    point_crs = 2193

    ### Read input data
    ds = xr.open_dataset(datasets.get_path(nc1))
    df1 = pd.read_csv(datasets.get_path(csv1), parse_dates=['date'], infer_datetime_format=True)
    print(df1.head())

    ### Assign nan toplaces wherethe quality index is below 0.4
    ds2 = ds[[grid_data_name]].where(ds.precipitationQualityIndex > 0.4)
    print(ds2)

    ### Close the file (by removing the object)
    ds.close()

    ### Create example points
    points_df = df1.loc[[6, 15, 132], [point_x_name, point_y_name]].copy()
    points_df.rename(columns={point_x_name: 'x', point_y_name: 'y'}, inplace=True)



Initialising Interp
-------------------
The package and general usage is via the main Interp class. It must be initialised with appropriate datasets and name parameters. Bare in mind, it is not required to have both input grids and points. One set is fine, and the appropriate interpolation methods will appear.

.. ipython:: python

    interpc = Interp(ds2, grid_time_name, grid_x_name, grid_y_name, grid_data_name, grid_crs, point_data=df1, point_time_name=point_time_name, point_x_name=point_x_name, point_y_name=point_y_name, point_data_name=point_data_name, point_crs=point_crs)


Nan filling
-----------
If your grid has nans (which the example does), fill those nans with the grid_interp_na method.

.. ipython:: python

    nan1 = ds2[grid_data_name].isnull().sum()

    interpc.grid_interp_na()

    nan2 = interpc.grid_data['precip'].isnull().sum()

    assert (nan1 > 0) & (nan2 == 0)


Base Interpolators
---------------------
All the 2D interpolators you'll need...

.. ipython:: python
    :okwarning:

    ## Parameters
    to_crs = 2193
    grid_res = 10000
    bbox=None
    order=2
    extrapolation='constant'
    cval=np.nan
    digits = 2
    min_lat = -48
    max_lat = -41
    min_lon = 170
    max_lon = 178
    min_val=0
    method='linear'

    ## grid to grid
    interp1 = interpc.grid_to_grid(grid_res, to_crs, bbox, order, extrapolation, min_val=min_val)
    print(interp1)

    ## points to grid
    interp2 = interpc.points_to_grid(grid_res, to_crs, bbox, method, extrapolation, min_val=min_val)
    print(interp2)

    ## grid to points
    interp3 = interpc.grid_to_points(points_df, to_crs, order, min_val=min_val)
    print(interp3)

    ## points to points
    interp4 = interpc.points_to_points(points_df, to_crs, method, min_val=min_val)
    print(interp4)


Adjust grid from points
-----------------------
There is also a method to adjust a grid based on the point_data (bias correction). And a method to run tests on it's accuracy.

.. ipython:: python
    :okwarning:

    interp5 = interpc.adjust_grid_from_points(grid_res, to_crs)
    print(interp5)

    interp6 = interpc.validate_grid_from_points(0.08, grid_res, to_crs)
    print(interp6)
